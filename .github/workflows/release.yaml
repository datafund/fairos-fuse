name: Release

defaults:
  run:
    shell: bash

on:
  push:
    branches-ignore:
      - '**'
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      GOARCH: ${{ matrix.arch }}
      CGO_ENABLED: ${{ matrix.cgo }}
      CPATH: ${{ matrix.cpath }}
      GODEBUG: cgocheck=2
    strategy:
      matrix:
        include:
          - os: windows-latest
            arch: amd64
            cgo: 1
            cpath: C:\Program Files (x86)\WinFsp\inc\fuse
          - os: ubuntu-latest
            arch: amd64
            cgo: 1
          - os: macos-10.15
            arch: amd64
            cgo: 1
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install go
        uses: actions/setup-go@v2
        with:
          stable: true
          go-version: 1.18.*

      - name: Install winfsp (Windows)
        if: runner.os == 'Windows'
        run: |
          $releases = Invoke-WebRequest https://api.github.com/repos/winfsp/winfsp/releases | ConvertFrom-Json
          $asseturi = $releases[0].assets.browser_download_url | Where-Object { $_ -match "winfsp-.*\.msi" }
          Invoke-WebRequest -Uri $asseturi -Out winfsp.msi
          Start-Process -NoNewWindow -Wait msiexec "/i winfsp.msi /qn INSTALLLEVEL=1000"
        shell: powershell

      - name: Install FUSE (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get -qq install libfuse-dev
          sudo apt-get -qq install libacl1-dev
          sudo apt-get install build-essential libgtk-3-dev libwebkit2gtk-4.0-dev libwebkit2gtk-4.0-37-gtk2

      - name: Install FUSE (macOS)
        if: runner.os == 'macOS'
        run: |
          # requires macos-10.15; does not work on macos-latest
          # see https://github.com/actions/virtual-environments/issues/4731
          brew install macfuse

      - name: Set git to use LF
        # make sure that line endings are not converted on windows
        # as gofmt linter will report that they need to be changed
        run: git config --global core.autocrlf false
      - name: Cache Go modules
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Install wails
        run: |
          GO111MODULE=on go install github.com/wailsapp/wails/v2/cmd/wails@latest
      - name: Build
        run: make binary
      - uses: actions/upload-artifact@v3
        if: matrix.os == 'windows-latest'
        with:
          name: windows
          path: build/bin/*
      - uses: actions/upload-artifact@v3
        if: matrix.os == 'ubuntu-latest'
        with:
          name: linux
          path: build/bin/*
      - uses: actions/upload-artifact@v3
        if: matrix.os == 'macos-10.15'
        with:
          name: mac
          path: build/bin/*
  release:
    needs: build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v3
        with:
          name: windows
          path: build/bin/windows
      - uses: actions/download-artifact@v3
        with:
          name: mac
          path: build/bin/mac
      - uses: actions/download-artifact@v3
        with:
          name: linux
          path: build/bin/linux
      - name: Display structure of downloaded files
        run: ls -R
      - run: mv build/bin/linux/FDA build/bin/fda
      - run: mv build/bin/windows/FDA.exe build/bin/fda.exe
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - shell: bash
        run: |
          chmod +x scripts/add-cert.sh && ./scripts/add-cert.sh
          npm install --global create-dmg
          chmod +x build/bin/mac/app.app/Contents/MacOS/app
          create-dmg build/bin/mac/app.app build/bin --identity '${{ secrets.ID }}'
          mv 'build/bin/Fairdrive Desktop App.app' build/bin/fda.dmg
        env:
          CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

      - name : Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}