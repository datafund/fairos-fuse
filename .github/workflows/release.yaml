name: Release

defaults:
  run:
    shell: bash

on:
  push:
    branches-ignore:
      - '**'
    tags:
      - 'v*.*.*'

jobs:
  build:
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        job_name: [ 'linux', 'linux_386', 'mac_amd64', 'mac_arm64', 'windows', 'other_os', 'go1.17', 'go1.18' ]
        include:
          - job_name: linux
            os: ubuntu-latest
            go: '1.19'
            gotags: cmount
            build_flags: '-include "^linux/"'
            check: true
            quicktest: true
            racequicktest: true
            deploy: true

          - job_name: linux_386
            os: ubuntu-latest
            go: '1.19'
            goarch: 386
            gotags: cmount
            quicktest: true

          - job_name: mac_amd64
            os: macos-11
            go: '1.19'
            gotags: 'cmount'
            build_flags: '-include "^darwin/amd64" -cgo'
            quicktest: true
            racequicktest: true
            deploy: true

          - job_name: mac_arm64
            os: macos-11
            go: '1.19'
            gotags: 'cmount'
            build_flags: '-include "^darwin/arm64" -cgo -macos-arch arm64 -cgo-cflags=-I/usr/local/include -cgo-ldflags=-L/usr/local/lib'
            deploy: true

          - job_name: windows
            os: windows-latest
            go: '1.19'
            gotags: cmount
            cgo: '0'
            build_flags: '-include "^windows/"'
            build_args: '-buildmode exe'
            quicktest: true
            deploy: true

          - job_name: other_os
            os: ubuntu-latest
            go: '1.19'
            build_flags: '-exclude "^(windows/|darwin/|linux/)"'
            compile_all: true
            deploy: true

          - job_name: go1.17
            os: ubuntu-latest
            go: '1.17'
            quicktest: true
            racequicktest: true

          - job_name: go1.18
            os: ubuntu-latest
            go: '1.18'
            quicktest: true
            racequicktest: true

    name: ${{ matrix.job_name }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
          check-latest: true

      - name: Set environment variables
        shell: bash
        run: |
          echo 'GOTAGS=${{ matrix.gotags }}' >> $GITHUB_ENV
          echo 'BUILD_FLAGS=${{ matrix.build_flags }}' >> $GITHUB_ENV
          echo 'BUILD_ARGS=${{ matrix.build_args }}' >> $GITHUB_ENV
          if [[ "${{ matrix.goarch }}" != "" ]]; then echo 'GOARCH=${{ matrix.goarch }}' >> $GITHUB_ENV ; fi
          if [[ "${{ matrix.cgo }}" != "" ]]; then echo 'CGO_ENABLED=${{ matrix.cgo }}' >> $GITHUB_ENV ; fi
      - name: Install Libraries on Linux
        shell: bash
        run: |
          sudo modprobe fuse
          sudo chmod 666 /dev/fuse
          sudo chown root:$USER /etc/fuse.conf
          sudo apt-get install fuse libfuse-dev rpm pkg-config
        if: matrix.os == 'ubuntu-latest'

      - name: Install Libraries on macOS
        shell: bash
        run: |
          brew update
          brew install --cask macfuse
        if: matrix.os == 'macos-11'

      - name: Install Libraries on Windows
        shell: powershell
        run: |
          $ProgressPreference = 'SilentlyContinue'
          choco install -y winfsp zip
          echo "CPATH=C:\Program Files\WinFsp\inc\fuse;C:\Program Files (x86)\WinFsp\inc\fuse" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          if ($env:GOARCH -eq "386") {
            choco install -y mingw --forcex86 --force
            echo "C:\\ProgramData\\chocolatey\\lib\\mingw\\tools\\install\\mingw32\\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          }
          # Copy mingw32-make.exe to make.exe so the same command line
          # can be used on Windows as on macOS and Linux
          $path = (get-command mingw32-make.exe).Path
          Copy-Item -Path $path -Destination (Join-Path (Split-Path -Path $path) 'make.exe')
        if: matrix.os == 'windows-latest'

      - name: Print Go version and environment
        shell: bash
        run: |
          printf "Using go at: $(which go)\n"
          printf "Go version: $(go version)\n"
          printf "\n\nGo environment:\n\n"
          go env
          printf "\n\nSystem environment:\n\n"
          env
      - name: Install wails
        run: |
          GO111MODULE=on go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Go module cache
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build
        run: |
          make binary

      - uses: actions/upload-artifact@v3
        if: matrix.os == 'windows-latest'
        with:
          name: windows
          path: build/bin/fairdrive-${{ matrix.os }}-${{ matrix.arch }}.exe
      - uses: actions/upload-artifact@v3
        if: matrix.os == 'ubuntu-latest'
        with:
          name: linux
          path: build/bin/fairdrive-${{ matrix.os }}-${{ matrix.arch }}
      - uses: actions/upload-artifact@v3
        if: matrix.os == 'macos-latest'
        with:
          name: mac
          path: build/bin/fairdrive-${{ matrix.os }}-${{ matrix.arch }}




#    strategy:
#      matrix:
#        include:
#          - os: windows-latest
#            arch: amd64
#            cgo: 1
#            cpath: C:\Program Files (x86)\WinFsp\inc\fuse
#          - os: ubuntu-latest
#            arch: amd64
#            cgo: 1
#          - os: ubuntu-latest
#            arch: arm64
#            cgo: 1
#          - os: macos-latest
#            arch: amd64
#            cgo: 1
#          - os: macos-latest
#            arch: arm64
#            cgo: 1
#      fail-fast: false
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#        with:
#          submodules: recursive
#      - name: Install go
#        uses: actions/setup-go@v2
#        with:
#          stable: true
#          go-version: 1.18.*
#
#      - name: Install winfsp (Windows)
#        if: runner.os == 'Windows'
#        run: |
#          $releases = Invoke-WebRequest https://api.github.com/repos/winfsp/winfsp/releases | ConvertFrom-Json
#          $asseturi = $releases[0].assets.browser_download_url | Where-Object { $_ -match "winfsp-.*\.msi" }
#          Invoke-WebRequest -Uri $asseturi -Out winfsp.msi
#          Start-Process -NoNewWindow -Wait msiexec "/i winfsp.msi /qn INSTALLLEVEL=1000"
#        shell: powershell
#
#      - name: Install FUSE (Linux)
#        if: runner.os == 'Linux'
#        run: |
#          sudo apt-get update
#          sudo apt-get -qq install libfuse-dev
#          sudo apt-get -qq install libacl1-dev
#          sudo apt-get install build-essential libgtk-3-dev libwebkit2gtk-4.0-dev
#
#      - name: Install FUSE (macOS)
#        if: runner.os == 'macOS'
#        run: |
#          brew install macfuse
#
#      - name: Set git to use LF
#        # make sure that line endings are not converted on windows
#        # as gofmt linter will report that they need to be changed
#        run: git config --global core.autocrlf false
#      - name: Cache Go modules
#        uses: actions/cache@v1
#        with:
#          path: ~/go/pkg/mod
#          key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}
#          restore-keys: |
#            ${{ runner.OS }}-build-${{ env.cache-name }}-
#            ${{ runner.OS }}-build-
#            ${{ runner.OS }}-
#      - name: Install wails
#        run: |
#          GO111MODULE=on go install github.com/wailsapp/wails/v2/cmd/wails@latest
#      - name: Build
#        run: make binary
#      - uses: actions/upload-artifact@v3
#        if: matrix.os == 'windows-latest'
#        with:
#          name: windows
#          path: build/bin/fairdrive-${{ matrix.os }}-${{ matrix.arch }}.exe
#      - uses: actions/upload-artifact@v3
#        if: matrix.os == 'ubuntu-latest'
#        with:
#          name: linux
#          path: build/bin/fairdrive-${{ matrix.os }}-${{ matrix.arch }}
#      - uses: actions/upload-artifact@v3
#        if: matrix.os == 'macos-latest'
#        with:
#          name: mac
#          path: build/bin/fairdrive-${{ matrix.os }}-${{ matrix.arch }}
#  release:
#    needs: build
#    runs-on: macos-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/download-artifact@v3
#        with:
#          name: windows
#          path: build/bin/windows
#      - uses: actions/download-artifact@v3
#        with:
#          name: mac
#          path: build/bin/mac
#      - uses: actions/download-artifact@v3
#        with:
#          name: linux
#          path: build/bin/linux
#      - name: Display structure of downloaded files
#        run: ls -R
#      - run: mv build/bin/linux/FDA build/bin/fairdrive
#      - run: mv build/bin/windows/FDA.exe build/bin/fairdrive.exe
#      - uses: actions/setup-node@v3
#        with:
#          node-version: 18
#
#      - name: Import Code-Signing Certificates for macOS
#        uses: Apple-Actions/import-codesign-certs@v1
#        with:
#          p12-file-base64: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}
#          p12-password: ${{ secrets.CERTIFICATE_PASSWORD }}
#
#      - name: Sign and notarize
#        shell: bash
#        run: |
#          chmod +x scripts/gon-config.sh && ./scripts/gon-config.sh
#          brew tap mitchellh/gon
#          brew install mitchellh/gon/gon
#          gon -log-level=info -log-json build/bin/config.json
#        env:
#          CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}
#          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
#          APPLE_USER: ${{ secrets.APPLE_USER }}
#          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
#          ID: ${{ secrets.ID }}
#
#      - name : Run GoReleaser
#        uses: goreleaser/goreleaser-action@v2
#        with:
#          distribution: goreleaser
#          version: latest
#          args: release --rm-dist
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}